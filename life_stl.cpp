#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <windows.h>
#include <cstdlib>
#include <ctime>

// –°–∏–º–≤–æ–ª—ã –∂–∏–≤—ã—Ö –∏ –º–µ—Ä—Ç–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
const char alive = '';
const char dead = ' ';
// –°–∏–º–≤–æ–ª –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –∂–∏–≤—É—é –∫–ª–µ—Ç–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const char keyboard_alive = 'X';

// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π —Ä—è–¥–æ–º —Å –∫–ª–µ—Ç–∫–æ–π pos
int count_neighbors(const std::vector< std::vector<char> > &universe,
                    const std::pair<int, int> &pos);
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ —É–º–µ—Ä–ª–∏
bool all_died(const std::vector< std::vector<char> > &universe);
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
bool without_changes(const std::vector< std::vector <char> > &current_generation,
                     const std::vector< std::vector<char> > &previous_generation);
// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
int population(const std::vector< std::vector<char> > &universe);
// –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ–ª–µ–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
void random_values(std::vector< std::vector<char> > &universe);
// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é
void manual_values(std::vector< std::vector<char> > &universe);
// –í—ã–≤–æ–¥ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
void show_universe(const std::vector< std::vector<char> > &universe);

int main()
{
    // –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    int width, height;
    std::cout << "Enter the width of the Universe: ";
    std::cin >> width;
    std::cout << "Enter the height of the Universe: ";
    std::cin >> height;
    // –í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    std::vector< std::vector<char> > universe(height, std::vector<char>(width, dead));
    // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
    std::vector< std::vector<char> > one_generation_ago(height, std::vector<char>(width, dead));
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ä—É—á–Ω–æ–π, —Å–ª—É—á–∞–π–Ω—ã–π)
    unsigned short mode;
    std::cout << "Enter the initial mode (0 - manual, 1 - random): ";
    std::cin >> mode;
    // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
    while(mode > 1)
    {
        std::cout << "Only 0 and 1: ";
        std::cin >> mode;
    }
    enum Mode {MANUAL, RANDOM};
    switch (mode)
    {
        case Mode::MANUAL:
            manual_values(universe);
            break;
        case Mode::RANDOM:
            random_values(universe);
            break;
        default:
            break;
    }
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ ( –ø–æ–∫–æ–ª–µ–Ω–∏–π )
    int steps = 0;
    // –°–∫–æ–ª—å–∫–æ —É–º–µ—Ä–ª–æ –∑–∞ –∏–≥—Ä—É
    int was_died = 0;
    // –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∂–∏–≤–æ –∑–∞ –∏–≥—Ä—É
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö –∫—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–æ –∂–∏–≤
    int was_alive = population(universe);
    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
    system("cls");
    while(true)
    {
        ++steps;
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        std::vector< std::vector<char> > temp = one_generation_ago = universe;
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–æ—Å—è—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é
        for (int i = 0; i < height; ++i)
        {
            for (int j = 0; j < width; ++j)
            {
                // –ú–æ–∂–µ—Ç –ª–∏ –∑–¥–µ—Å—å —Ä–æ–¥–∏—Ç—Å—è –∫–ª–µ—Ç–∫–∞?
                if (universe[i][j] == dead
                    && (count_neighbors(universe, std::pair<int, int>(i, j)) == 3))
                {
                    ++was_alive;
                    temp[i][j] = alive;
                }
                // –ú–æ–∂–µ—Ç –ª–∏ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–º–µ—Ä–µ—Ç—å?
                else if(universe[i][j] == alive
                    && (count_neighbors(universe, std::pair<int, int>(i, j)) < 2
                        || count_neighbors(universe, std::pair<int, int>(i, j)) > 3))
                {
                    ++was_died;
                    temp[i][j] = dead;
                }
            }
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        universe = temp;
        // –í—ã–≤–æ–¥ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
        show_universe(universe);
        // –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ ( –ø–æ–∫–æ–ª–µ–Ω–∏–π )
        std::cout << "Population = " << population(universe) << '\n';
        std::cout << "Step #" << steps << '\n';
        std::cout << '\n';
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        Sleep(1000);
        system("cls");
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        if(all_died(universe))
        {
            std::cout << "All died\n";
            break;
        }
        else if(without_changes(universe, one_generation_ago))
        {
            std::cout << "Without changes\n";
            // –í—ã–≤–æ–¥ —Ç–æ –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–∞ –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
            show_universe(one_generation_ago);
            // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            std::cout << "Population = " << population(universe) << '\n';
            std::cout << "Was dead = " << was_died << '\n';
            break;
        }
    }
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
    std::cout << "Was alive = " << was_alive << '\n';
    std::cout << "Number of steps = " << steps << '\n';
    return 0;
}

// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π —Ä—è–¥–æ–º —Å –∫–ª–µ—Ç–∫–æ–π pos
int count_neighbors(const std::vector< std::vector<char> > &universe,
                    const std::pair<int, int> &pos)
{
    // –°—á–µ—Ç—á–∏–∫ –∂–∏–≤—ã—Ö —Å–æ—Å–µ–¥–µ–π
    int count = 0;
    // –†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    int width = universe[0].size();
    int height = universe.size();
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            if (i == 0 && j == 0)
            {
                continue;
            }
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Å–µ–¥–∞
            std::pair<int, int> neighbor(pos.first + i, pos.second + j);
            // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É, –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            neighbor.first = (neighbor.first == height) ? 0 : neighbor.first;
            neighbor.first = (neighbor.first < 0) ? height - 1 : neighbor.first;
            neighbor.second = (neighbor.second == width) ? 0 : neighbor.second;
            neighbor.second = (neighbor.second < 0) ? width - 1 : neighbor.second;
            // +1 –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –∂–∏–≤–∞—è
            count += (universe[neighbor.first][neighbor.second] == alive) ? 1 : 0;
        }
    }
    return count;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ —É–º–µ—Ä–ª–∏
bool all_died(const std::vector< std::vector<char> > &universe)
{
    return std::all_of(universe.begin(), universe.end(),
        [](std::vector<char> v){ return std::all_of(v.begin(), v.end(),
            [](char j){ return j == dead; }); });
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
bool without_changes(const std::vector< std::vector <char> > &current_generation,
                     const std::vector< std::vector<char> > &previous_generation)
{
    return (current_generation == previous_generation);
}

// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
int population(const std::vector< std::vector<char> > &universe)
{
    int population = 0;
    for_each(universe.begin(), universe.end(),
        [&](std::vector<char> v){ population += count(v.begin(), v.end(), alive); });
    return population;
}

// –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ–ª–µ–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
void random_values(std::vector< std::vector<char> > &universe)
{
    // –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    std::cout << "Enter chance percentage: ";
    double percentage;
    std::cin >> percentage;
    srand(time(nullptr));
    for_each(universe.begin(), universe.end(),
        [&](std::vector<char> &v){ generate(v.begin(), v.end(),
            [&](){ return ((rand() % 100 + 1) <= percentage) ? alive : dead; }); });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é
void manual_values(std::vector< std::vector<char> > &universe)
{
    for_each(universe.begin(), universe.end(),
        [&](std::vector<char> &v){ generate(v.begin(), v.end(),
            [&]() -> char { char input;
                            std::cin >> input;
                            return (input == keyboard_alive) ? alive : dead; }); });
}

// –í—ã–≤–æ–¥ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
void show_universe(const std::vector< std::vector<char> > &universe)
{
    for_each(universe.begin(), universe.end(),
        [](std::vector<char> v){ for_each(v.begin(), v.end(),
            [](char x){ std::cout << x; }); std::cout << '\n'; });
}